Функция CardAutocreateGET(Запрос)
	
	Попытка
		
		Если Запрос.ПараметрыЗапроса.Получить("event") <> "cardautocreate" Тогда
			Ответ = Новый HTTPСервисОтвет(405);
			ЗаписьЖурналаРегистрации("OSMI Event", УровеньЖурналаРегистрации.Ошибка,,
				"Событие не поддерживается данным обработчиком - " + Запрос.ПараметрыЗапроса.Получить("event"));
			Возврат Ответ;
		КонецЕсли;
		
		НомерОСМИ = СокрЛП(Запрос.ПараметрыЗапроса.Получить("serial"));
		Если НомерОСМИ = "" Тогда
			Ответ = Новый HTTPСервисОтвет(400);
			ЗаписьЖурналаРегистрации("OSMI Event", УровеньЖурналаРегистрации.Ошибка,,
				"Пустой серийный номер карты для события cardautocreate");
			Возврат Ответ;
		КонецЕсли;
		
		//Обработчику сервиса даем минимум прав
		//Ниже мы знаем, что он может выполнить только создание новой карты и только в этом месте
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		НоваяКарта = СоздатьКартуАвторегистрации(НомерОСМИ);
		ЗафиксироватьТранзакцию();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Ответ = Новый HTTPСервисОтвет(200);
		Возврат Ответ;
		
	Исключение
		
		Ответ = Новый HTTPСервисОтвет(500);
		ЗаписьЖурналаРегистрации("OSMI Event", УровеньЖурналаРегистрации.Ошибка,,
			"Ошибка обработки события - " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ответ;
		
	КонецПопытки;
	
КонецФункции

//Служебные функции
Функция СоздатьКартуАвторегистрации(НомерОСМИ, Наименование = "")
	
	НоваяКарта = Справочники.ИнформационныеКарты.СоздатьЭлемент();
	НоваяКарта.Родитель = Справочники.ИнформационныеКарты.Авторегистрация;
	НоваяКарта.ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая;
	НоваяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	НоваяКарта.ТипШтрихКода = Перечисления.ТипыШтрихкодов.Code39;
	НоваяКарта.КодКарты = НомерОСМИ;
	НоваяКарта.Наименование = ?(ЗначениеЗаполнено(Наименование), Наименование, "OSMI - " + НомерОСМИ);
	НоваяКарта.ПИТ_КартаАвторегистрации = Истина;
	НоваяКарта.ВидДисконтнойКарты = ПолучитьВидКарты(НомерОСМИ);
	НоваяКарта.Записать();
	
	ЗаписьРС = РегистрыСведений.ПИТ_СоответствиеКодовКартОСМИ.СоздатьМенеджерЗаписи();
	ЗаписьРС.Активность = Истина;
	ЗаписьРС.КодОСМИ = НомерОСМИ;
	ЗаписьРС.ИнформационнаяКарта = НоваяКарта.Ссылка;
	ЗаписьРС.Записать(Истина);		

	ЗаписьРС = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	ЗаписьРС.Активность = Истина;
	ЗаписьРС.Владелец = НоваяКарта.Ссылка;
	ЗаписьРС.ПредставлениеШтрихкода = НомерОСМИ;
	ЗаписьРС.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39;
	ЗаписьРС.Штрихкод = НомерОСМИ;
	ЗаписьРС.Записать(Истина);
	
	Возврат НоваяКарта.Ссылка;
	
КонецФункции

Функция ПолучитьВидКарты(Знач КодОСМИ)
	
	Попытка
		КодОСМИ = Число(КодОСМИ);
	Исключение
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецПопытки;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ПИТ_ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации.ВидКарты
	                      |ИЗ
	                      |	РегистрСведений.ПИТ_ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации КАК ПИТ_ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации
	                      |ГДЕ
	                      |	ПИТ_ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации.ДиапазонС <= &КодОСМИ
	                      |	И ПИТ_ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации.ДиапазонПо >= &КодОСМИ");
	
	Запрос.УстановитьПараметр("КодОСМИ", КодОСМИ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВидКарты;
	КонецЕсли;
	
	Возврат Справочники.ВидыДисконтныхКарт.ПустаяСсылка();
	
КонецФункции
