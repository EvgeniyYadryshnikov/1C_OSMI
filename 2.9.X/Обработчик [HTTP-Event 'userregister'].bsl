Функция userregisterGET(Запрос)
	
	Попытка
		
		Если Запрос.ПараметрыЗапроса.Получить("event") <> "userregister" Тогда
			Ответ = Новый HTTPСервисОтвет(405);
			ЗаписьЖурналаРегистрации("OSMI Event", УровеньЖурналаРегистрации.Ошибка,,
				"Событие не поддерживается данным обработчиком - " + Запрос.ПараметрыЗапроса.Получить("event"));
			Возврат Ответ;
		КонецЕсли;
		
		НомерОСМИ = СокрЛП(Запрос.ПараметрыЗапроса.Получить("serial"));
		Если НомерОСМИ = "" Тогда
			Ответ = Новый HTTPСервисОтвет(400);
			ЗаписьЖурналаРегистрации("OSMI Event", УровеньЖурналаРегистрации.Ошибка,,
				"Пустой серийный номер карты для события userregister");
			Возврат Ответ;
		КонецЕсли;
		
		ДанныеРегистрационнойГруппы = ПИТ_ОСМИ.ПолучитьДанныеРегистрационнойГруппы();
		Если НЕ ДанныеРегистрационнойГруппы.Успех Тогда
			Ответ = Новый HTTPСервисОтвет(400);
			ЗаписьЖурналаРегистрации("OSMI Event", УровеньЖурналаРегистрации.Ошибка,,
				"Ошибка выборки данных из регистрационной группы - " +
				ДанныеРегистрационнойГруппы.ОписаниеОшибки);
			Возврат Ответ;
		КонецЕсли;	
		
		МассивУдаляемых = Новый Массив;
		
		//Обработчику сервиса даем минимум прав
		//Ниже мы знаем, что он может выполнить только создание новой карты и только в этом месте
		УстановитьПривилегированныйРежим(Истина);
		НачатьТранзакцию();
			
		Для Каждого Элемент Из ДанныеРегистрационнойГруппы.Ответ.registrations Цикл
			
			НомерКарты = СокрЛП(Элемент.serialNo);
			Если НЕ ЗначениеЗаполнено(НомерКарты) Тогда
				Продолжить;
			КонецЕсли;
			
			ИнформационнаяКарта = ПолучитьИнформационнуюКарту(НомерКарты);
			Если НЕ ЗначениеЗаполнено(ИнформационнаяКарта) Тогда //Предполагаем, ранее было потеряно событие CardAutoCreate
				ИнформационнаяКарта = СоздатьКартуАвторегистрации(НомерКарты, СокрЛП(Элемент.Фамилия) + " " + СокрЛП(Элемент.Имя));
			Иначе
				ИнформационнаяКартаОбъект = ИнформационнаяКарта.ПолучитьОбъект();
				ИнформационнаяКартаОбъект.Наименование = СокрЛП(Элемент.Фамилия) + " " + СокрЛП(Элемент.Имя);
				ИнформационнаяКартаОбъект.Записать();
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИнформационнаяКарта.ВладелецКарты) Тогда
				
				ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
				ФизЛицо.Наименование = СокрЛП(Элемент.Фамилия) + " " + СокрЛП(Элемент.Имя);
				ФизЛицо.Родитель = ПолучитьГруппуФизическихЛиц(НомерКарты);
				
				Попытка
					ФизЛицо.ДатаРождения = Дата(Элемент.Дата_рождения + " 00:00:00");
				Исключение
					ЗаписьЖурналаРегистрации("OSMI Event", УровеньЖурналаРегистрации.Предупреждение,,
						"Для карты " + СокрЛП(Элемент.serialNo) + " поступило некорректное значение даты рождения!");
				КонецПопытки;
				
				ФизЛицо.Записать();
				
				ЗаписьФЛ = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
				ЗаписьФЛ.Активность = Истина;
				ЗаписьФЛ.Период = ТекущаяДатаСеанса();
				ЗаписьФЛ.Фамилия = СокрЛП(Элемент.Фамилия);
				ЗаписьФЛ.Имя = СокрЛП(Элемент.Имя);
				ЗаписьФЛ.ФизЛицо = ФизЛицо.Ссылка;
				ЗаписьФЛ.Записать(Истина);
				
				ИнформационнаяКартаОб = ИнформационнаяКарта.ПолучитьОбъект();
				ИнформационнаяКартаОб.ВладелецКарты = ФизЛицо.Ссылка;
				ИнформационнаяКартаОб.Записать();
				
				ДанныеТелефона = НормализоватьНомерТелефона(Элемент.Телефон);
				ЗаписьКонтактнойИнформации = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
				ЗаписьКонтактнойИнформации.Активность = Истина;
				ЗаписьКонтактнойИнформации.Объект = ФизЛицо.Ссылка;
				ЗаписьКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний;
				ЗаписьКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				ЗаписьКонтактнойИнформации.Поле1 = ДанныеТелефона[0];
				ЗаписьКонтактнойИнформации.Поле2 = ДанныеТелефона[1];
				ЗаписьКонтактнойИнформации.Поле3 = ДанныеТелефона[2];
				ЗаписьКонтактнойИнформации.Представление = ДанныеТелефона[3];
				ЗаписьКонтактнойИнформации.Записать(Истина);
				
				Если ЗначениеЗаполнено(ФизЛицо.ДатаРождения) Тогда
					УстановитьЗначениеПараметраКонтактнойИнформации("День Рождения", ФизЛицо.Ссылка,
						Перечисления.ТипыКонтактнойИнформации.Другое, Формат(ФизЛицо.ДатаРождения, "ДЛФ=D"));
				КонецЕсли;	
				
				Если Элемент.Свойство("Почта") Тогда
					УстановитьЗначениеПараметраКонтактнойИнформации("Email", ФизЛицо.Ссылка,
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элемент.Почта);
				КонецЕсли;
					
				УстановитьЗначениеПараметраКонтактнойИнформации("без рассылки", ФизЛицо.Ссылка,
					Перечисления.ТипыКонтактнойИнформации.Другое, 
					?(СокрЛП(ВРЕГ(Элемент.К_Почта)) = "ДА", "Нет", "Да"));
				УстановитьЗначениеПараметраКонтактнойИнформации("без смс", ФизЛицо.Ссылка,
					Перечисления.ТипыКонтактнойИнформации.Другое,
					?(СокрЛП(ВРЕГ(Элемент.К_СМС)) = "ДА", "Нет", "Да"));
					
				Попытка
					Если Число(Элемент.Пол) > 0 Тогда
						УстановитьЗначениеПараметраКонтактнойИнформации("Пол", ФизЛицо.Ссылка,
							Перечисления.ТипыКонтактнойИнформации.Другое,
							?(Элемент.Пол = "1", "Мужской", "Женский"));
					КонецЕсли;								
				Исключение
				КонецПопытки;
				
			Иначе
				ЗаписьЖурналаРегистрации("OSMI Event", УровеньЖурналаРегистрации.Предупреждение,,
					"Попытка изменения регистрационных данных для карты " + СокрЛП(Элемент.serialNo) +
					" - Владелец карты уже зарегистрирован в системе! - " + ИнформационнаяКарта.ВладелецКарты);
			КонецЕсли;
			
			МассивУдаляемых.Добавить(НомерКарты);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если МассивУдаляемых.Количество() > 0 Тогда
			ОтветСервиса = ПИТ_ОСМИ.УдалитьДанныеРегистрационнойГруппы(Новый Структура("registrations", МассивУдаляемых));
			Если НЕ ОтветСервиса.Успех Тогда
				ЗаписьЖурналаРегистрации("OSMI Event", УровеньЖурналаРегистрации.Ошибка,,
					"Ошибка удаления данных регистрационной группы - " + ОтветСервиса.ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Ответ = Новый HTTPСервисОтвет(200);
		Возврат Ответ;
		
	Исключение
		
		Ответ = Новый HTTPСервисОтвет(500);
		ЗаписьЖурналаРегистрации("OSMI Event", УровеньЖурналаРегистрации.Ошибка,,
			"Ошибка обработки события - " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ответ;
		
	КонецПопытки;
	
КонецФункции

//Вспомогательные и служебные функции
Функция ПолучитьИнформационнуюКарту(КодОСМИ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	СоответствиеКодовКартОСМИ.ИнформационнаяКарта КАК ИнформационнаяКарта
	                      |ИЗ
	                      |	РегистрСведений.ПИТ_СоответствиеКодовКартОСМИ КАК СоответствиеКодовКартОСМИ
	                      |ГДЕ
	                      |	НЕ СоответствиеКодовКартОСМИ.ИнформационнаяКарта.ПометкаУдаления
	                      |	И НЕ СоответствиеКодовКартОСМИ.ИнформационнаяКарта.ЭтоГруппа
	                      |	И СоответствиеКодовКартОСМИ.КодОСМИ = &КодОСМИ");
	
	Запрос.УстановитьПараметр("КодОСМИ", КодОСМИ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ИнформационнаяКарта;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция НормализоватьНомерТелефона(Знач Телефон)
	
	МассивПолейТелефона = Новый Массив;
	
	Телефон = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Телефон, " ",""), "-", ""), "(", ""), ")", "");
	Если Лев(Телефон, 1) = "8" Тогда //Нашли код города
		Телефон = Прав(Телефон, СтрДлина(Телефон) - 1);
		МассивПолейТелефона.Добавить("+7");
	ИначеЕсли Лев(Телефон, 2) = "+7" Тогда //Нашли код города
		Телефон = Прав(Телефон, СтрДлина(Телефон) - 2);
		МассивПолейТелефона.Добавить("+7");
	Иначе
		МассивПолейТелефона.Добавить("");
	КонецЕсли;
	
	Если СтрДлина(Телефон) > 7 Тогда
		МассивПолейТелефона.Добавить("(" + Лев(Телефон, СтрДлина(Телефон) - 7) + ")");
		Телефон = Прав(Телефон, 7);
	Иначе
		МассивПолейТелефона.Добавить("");
	КонецЕсли;
	
	Если СтрДлина(Телефон) = 7 Тогда
		МассивПолейТелефона.Добавить(Лев(Телефон, 3) + "-" + Сред(Телефон, 4, 2) + "-" + Прав(Телефон, 2));
	Иначе
		МассивПолейТелефона.Добавить(Телефон);
	КонецЕсли;	
	
	МассивПолейТелефона.Добавить(?(СтрДлина(МассивПолейТелефона[0]) > 0, МассивПолейТелефона[0] + " ", "")
		+ ?(СтрДлина(МассивПолейТелефона[1]) > 0, "" + МассивПолейТелефона[1] + " ", "") + МассивПолейТелефона[2]);
	
	Возврат МассивПолейТелефона;
					
КонецФункции

Функция ПолучитьВидКарты(Знач КодОСМИ)
	
	Попытка
		КодОСМИ = Число(КодОСМИ);
	Исключение
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецПопытки;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации.ВидКарты КАК ВидКарты
 	                      |ИЗ
	                      |	РегистрСведений.ПИТ_ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации КАК ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации
	                      |ГДЕ
	                      |	ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации.ДиапазонС <= &КодОСМИ
	                      |	И ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации.ДиапазонПо >= &КодОСМИ");
	
	Запрос.УстановитьПараметр("КодОСМИ", КодОСМИ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВидКарты;
	КонецЕсли;
	
	Возврат Справочники.ВидыДисконтныхКарт.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьГруппуФизическихЛиц(Знач КодОСМИ)
	
	Попытка
		КодОСМИ = Число(КодОСМИ);
	Исключение
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецПопытки;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации.ГруппаФизическихЛиц КАК ГруппаФизическихЛиц
	                      |ИЗ
	                      |	РегистрСведений.ПИТ_ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации КАК ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации
	                      |ГДЕ
	                      |	ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации.ДиапазонС <= &КодОСМИ
	                      |	И ГруппыФизическихЛицПоДиапазонамКодовАвтоРегистрации.ДиапазонПо >= &КодОСМИ");
	
	Запрос.УстановитьПараметр("КодОСМИ", КодОСМИ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ГруппаФизическихЛиц;
	КонецЕсли;
	
	Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	
КонецФункции

Процедура УстановитьЗначениеПараметраКонтактнойИнформации(НаименованиеПараметра, ФизическоеЛицо, ТипКонтактнойИнформации, Данные)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                      |ГДЕ
	                      |	ВидыКонтактнойИнформации.Наименование = &Наименование
	                      |	И ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации");
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеПараметра);
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаписьКонтактнойИнформации = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		ЗаписьКонтактнойИнформации.Активность = Истина;
		ЗаписьКонтактнойИнформации.Объект = ФизическоеЛицо;
		ЗаписьКонтактнойИнформации.Вид = Выборка.Ссылка;
		ЗаписьКонтактнойИнформации.Тип = ТипКонтактнойИнформации;
		ЗаписьКонтактнойИнформации.Поле1 = Данные;
		ЗаписьКонтактнойИнформации.Представление = Данные;
		ЗаписьКонтактнойИнформации.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьКартуАвторегистрации(НомерОСМИ, Наименование = "")
	
	НоваяКарта = Справочники.ИнформационныеКарты.СоздатьЭлемент();
	НоваяКарта.Родитель = Справочники.ИнформационныеКарты.Авторегистрация;
	НоваяКарта.ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая;
	НоваяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	НоваяКарта.ТипШтрихКода = Перечисления.ТипыШтрихкодов.Code39;
	НоваяКарта.КодКарты = НомерОСМИ;
	НоваяКарта.Наименование = ?(ЗначениеЗаполнено(Наименование), Наименование, "OSMI - " + НомерОСМИ);
	НоваяКарта.ПИТ_КартаАвторегистрации = Истина;
	НоваяКарта.ВидДисконтнойКарты = ПолучитьВидКарты(НомерОСМИ);
	НоваяКарта.Записать();
	
	ЗаписьРС = РегистрыСведений.ПИТ_СоответствиеКодовКартОСМИ.СоздатьМенеджерЗаписи();
	ЗаписьРС.Активность = Истина;
	ЗаписьРС.КодОСМИ = НомерОСМИ;
	ЗаписьРС.ИнформационнаяКарта = НоваяКарта.Ссылка;
	ЗаписьРС.Записать(Истина);		

	ЗаписьРС = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	ЗаписьРС.Активность = Истина;
	ЗаписьРС.Владелец = НоваяКарта.Ссылка;
	ЗаписьРС.ПредставлениеШтрихкода = НомерОСМИ;
	ЗаписьРС.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39;
	ЗаписьРС.Штрихкод = НомерОСМИ;
	ЗаписьРС.Записать(Истина);
	
	Возврат НоваяКарта.Ссылка;
	
КонецФункции
